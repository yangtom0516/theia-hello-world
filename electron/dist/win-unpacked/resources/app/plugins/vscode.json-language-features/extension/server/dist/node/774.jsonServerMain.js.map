{"version":3,"file":"774.jsonServerMain.js","mappings":"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","sources":["webpack://vscode-json-languageserver/./src/jsonServer.ts","webpack://vscode-json-languageserver/./src/languageModelCache.ts","webpack://vscode-json-languageserver/./src/node/jsonServerMain.ts","webpack://vscode-json-languageserver/./src/utils/runner.ts","webpack://vscode-json-languageserver/./src/utils/validation.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tConnection,\n\tTextDocuments, InitializeParams, InitializeResult, NotificationType, RequestType,\n\tDocumentRangeFormattingRequest, Disposable, ServerCapabilities, TextDocumentSyncKind, TextEdit, DocumentFormattingRequest, TextDocumentIdentifier, FormattingOptions, Diagnostic, CodeAction, CodeActionKind\n} from 'vscode-languageserver';\n\nimport { runSafe, runSafeAsync } from './utils/runner';\nimport { DiagnosticsSupport, registerDiagnosticsPullSupport, registerDiagnosticsPushSupport } from './utils/validation';\nimport { TextDocument, JSONDocument, JSONSchema, getLanguageService, DocumentLanguageSettings, SchemaConfiguration, ClientCapabilities, Range, Position, SortOptions } from 'vscode-json-languageservice';\nimport { getLanguageModelCache } from './languageModelCache';\nimport { Utils, URI } from 'vscode-uri';\nimport * as l10n from '@vscode/l10n';\n\ntype ISchemaAssociations = Record<string, string[]>;\n\ntype JSONLanguageStatus = { schemas: string[] };\n\nnamespace SchemaAssociationNotification {\n\texport const type: NotificationType<ISchemaAssociations | SchemaConfiguration[]> = new NotificationType('json/schemaAssociations');\n}\n\nnamespace VSCodeContentRequest {\n\texport const type: RequestType<string, string, any> = new RequestType('vscode/content');\n}\n\nnamespace SchemaContentChangeNotification {\n\texport const type: NotificationType<string | string[]> = new NotificationType('json/schemaContent');\n}\n\nnamespace ForceValidateRequest {\n\texport const type: RequestType<string, Diagnostic[], any> = new RequestType('json/validate');\n}\n\nnamespace LanguageStatusRequest {\n\texport const type: RequestType<string, JSONLanguageStatus, any> = new RequestType('json/languageStatus');\n}\n\nexport interface DocumentSortingParams {\n\t/**\n\t * The uri of the document to sort.\n\t */\n\turi: string;\n\t/**\n\t * The sort options\n\t */\n\toptions: SortOptions;\n}\n\nnamespace DocumentSortingRequest {\n\texport const type: RequestType<DocumentSortingParams, TextEdit[], any> = new RequestType('json/sort');\n}\n\nconst workspaceContext = {\n\tresolveRelativePath: (relativePath: string, resource: string) => {\n\t\tconst base = resource.substring(0, resource.lastIndexOf('/') + 1);\n\t\treturn Utils.resolvePath(URI.parse(base), relativePath).toString();\n\t}\n};\n\nexport interface RequestService {\n\tgetContent(uri: string): Promise<string>;\n}\n\nexport interface RuntimeEnvironment {\n\tfile?: RequestService;\n\thttp?: RequestService;\n\tconfigureHttpRequests?(proxy: string | undefined, strictSSL: boolean): void;\n\treadonly timer: {\n\t\tsetImmediate(callback: (...args: any[]) => void, ...args: any[]): Disposable;\n\t\tsetTimeout(callback: (...args: any[]) => void, ms: number, ...args: any[]): Disposable;\n\t};\n}\n\nexport function startServer(connection: Connection, runtime: RuntimeEnvironment) {\n\n\tfunction getSchemaRequestService(handledSchemas: string[] = ['https', 'http', 'file']) {\n\t\tconst builtInHandlers: { [protocol: string]: RequestService | undefined } = {};\n\t\tfor (const protocol of handledSchemas) {\n\t\t\tif (protocol === 'file') {\n\t\t\t\tbuiltInHandlers[protocol] = runtime.file;\n\t\t\t} else if (protocol === 'http' || protocol === 'https') {\n\t\t\t\tbuiltInHandlers[protocol] = runtime.http;\n\t\t\t}\n\t\t}\n\t\treturn (uri: string): Thenable<string> => {\n\t\t\tconst protocol = uri.substr(0, uri.indexOf(':'));\n\n\t\t\tconst builtInHandler = builtInHandlers[protocol];\n\t\t\tif (builtInHandler) {\n\t\t\t\treturn builtInHandler.getContent(uri);\n\t\t\t}\n\t\t\treturn connection.sendRequest(VSCodeContentRequest.type, uri).then(responseText => {\n\t\t\t\treturn responseText;\n\t\t\t}, error => {\n\t\t\t\treturn Promise.reject(error.message);\n\t\t\t});\n\t\t};\n\t}\n\n\t// create the JSON language service\n\tlet languageService = getLanguageService({\n\t\tworkspaceContext,\n\t\tcontributions: [],\n\t\tclientCapabilities: ClientCapabilities.LATEST\n\t});\n\n\t// Create a text document manager.\n\tconst documents = new TextDocuments(TextDocument);\n\n\t// Make the text document manager listen on the connection\n\t// for open, change and close text document events\n\tdocuments.listen(connection);\n\n\tlet clientSnippetSupport = false;\n\tlet dynamicFormatterRegistration = false;\n\tlet hierarchicalDocumentSymbolSupport = false;\n\n\tlet foldingRangeLimitDefault = Number.MAX_VALUE;\n\tlet resultLimit = Number.MAX_VALUE;\n\tlet jsonFoldingRangeLimit = Number.MAX_VALUE;\n\tlet jsoncFoldingRangeLimit = Number.MAX_VALUE;\n\tlet jsonColorDecoratorLimit = Number.MAX_VALUE;\n\tlet jsoncColorDecoratorLimit = Number.MAX_VALUE;\n\n\tlet formatterMaxNumberOfEdits = Number.MAX_VALUE;\n\tlet diagnosticsSupport: DiagnosticsSupport | undefined;\n\n\n\t// After the server has started the client sends an initialize request. The server receives\n\t// in the passed params the rootPath of the workspace plus the client capabilities.\n\tconnection.onInitialize((params: InitializeParams): InitializeResult => {\n\n\t\tconst initializationOptions = params.initializationOptions as any || {};\n\n\t\tconst handledProtocols = initializationOptions?.handledSchemaProtocols;\n\n\t\tlanguageService = getLanguageService({\n\t\t\tschemaRequestService: getSchemaRequestService(handledProtocols),\n\t\t\tworkspaceContext,\n\t\t\tcontributions: [],\n\t\t\tclientCapabilities: params.capabilities\n\t\t});\n\n\t\tfunction getClientCapability<T>(name: string, def: T) {\n\t\t\tconst keys = name.split('.');\n\t\t\tlet c: any = params.capabilities;\n\t\t\tfor (let i = 0; c && i < keys.length; i++) {\n\t\t\t\tif (!c.hasOwnProperty(keys[i])) {\n\t\t\t\t\treturn def;\n\t\t\t\t}\n\t\t\t\tc = c[keys[i]];\n\t\t\t}\n\t\t\treturn c;\n\t\t}\n\n\t\tclientSnippetSupport = getClientCapability('textDocument.completion.completionItem.snippetSupport', false);\n\t\tdynamicFormatterRegistration = getClientCapability('textDocument.rangeFormatting.dynamicRegistration', false) && (typeof initializationOptions.provideFormatter !== 'boolean');\n\t\tfoldingRangeLimitDefault = getClientCapability('textDocument.foldingRange.rangeLimit', Number.MAX_VALUE);\n\t\thierarchicalDocumentSymbolSupport = getClientCapability('textDocument.documentSymbol.hierarchicalDocumentSymbolSupport', false);\n\t\tformatterMaxNumberOfEdits = initializationOptions.customCapabilities?.rangeFormatting?.editLimit || Number.MAX_VALUE;\n\n\t\tconst supportsDiagnosticPull = getClientCapability('textDocument.diagnostic', undefined);\n\t\tif (supportsDiagnosticPull === undefined) {\n\t\t\tdiagnosticsSupport = registerDiagnosticsPushSupport(documents, connection, runtime, validateTextDocument);\n\t\t} else {\n\t\t\tdiagnosticsSupport = registerDiagnosticsPullSupport(documents, connection, runtime, validateTextDocument);\n\t\t}\n\n\t\tconst capabilities: ServerCapabilities = {\n\t\t\ttextDocumentSync: TextDocumentSyncKind.Incremental,\n\t\t\tcompletionProvider: clientSnippetSupport ? {\n\t\t\t\tresolveProvider: false, // turn off resolving as the current language service doesn't do anything on resolve. Also fixes #91747\n\t\t\t\ttriggerCharacters: ['\"', ':']\n\t\t\t} : undefined,\n\t\t\thoverProvider: true,\n\t\t\tdocumentSymbolProvider: true,\n\t\t\tdocumentRangeFormattingProvider: initializationOptions.provideFormatter === true,\n\t\t\tdocumentFormattingProvider: initializationOptions.provideFormatter === true,\n\t\t\tcolorProvider: {},\n\t\t\tfoldingRangeProvider: true,\n\t\t\tselectionRangeProvider: true,\n\t\t\tdocumentLinkProvider: {},\n\t\t\tdiagnosticProvider: {\n\t\t\t\tdocumentSelector: null,\n\t\t\t\tinterFileDependencies: false,\n\t\t\t\tworkspaceDiagnostics: false\n\t\t\t},\n\t\t\tcodeActionProvider: true\n\t\t};\n\n\t\treturn { capabilities };\n\t});\n\n\n\n\t// The settings interface describes the server relevant settings part\n\tinterface Settings {\n\t\tjson?: {\n\t\t\tschemas?: JSONSchemaSettings[];\n\t\t\tformat?: { enable?: boolean };\n\t\t\tkeepLines?: { enable?: boolean };\n\t\t\tvalidate?: { enable?: boolean };\n\t\t\tresultLimit?: number;\n\t\t\tjsonFoldingLimit?: number;\n\t\t\tjsoncFoldingLimit?: number;\n\t\t\tjsonColorDecoratorLimit?: number;\n\t\t\tjsoncColorDecoratorLimit?: number;\n\t\t};\n\t\thttp?: {\n\t\t\tproxy?: string;\n\t\t\tproxyStrictSSL?: boolean;\n\t\t};\n\t}\n\n\tinterface JSONSchemaSettings {\n\t\tfileMatch?: string[];\n\t\turl?: string;\n\t\tschema?: JSONSchema;\n\t\tfolderUri?: string;\n\t}\n\n\n\n\tlet jsonConfigurationSettings: JSONSchemaSettings[] | undefined = undefined;\n\tlet schemaAssociations: ISchemaAssociations | SchemaConfiguration[] | undefined = undefined;\n\tlet formatterRegistrations: Thenable<Disposable>[] | null = null;\n\tlet validateEnabled = true;\n\tlet keepLinesEnabled = false;\n\n\t// The settings have changed. Is sent on server activation as well.\n\tconnection.onDidChangeConfiguration((change) => {\n\t\tconst settings = <Settings>change.settings;\n\t\truntime.configureHttpRequests?.(settings?.http?.proxy, !!settings.http?.proxyStrictSSL);\n\t\tjsonConfigurationSettings = settings.json?.schemas;\n\t\tvalidateEnabled = !!settings.json?.validate?.enable;\n\t\tkeepLinesEnabled = settings.json?.keepLines?.enable || false;\n\t\tupdateConfiguration();\n\n\t\tconst sanitizeLimitSetting = (settingValue: any) => Math.trunc(Math.max(settingValue, 0));\n\t\tresultLimit = sanitizeLimitSetting(settings.json?.resultLimit || Number.MAX_VALUE);\n\t\tjsonFoldingRangeLimit = sanitizeLimitSetting(settings.json?.jsonFoldingLimit || foldingRangeLimitDefault);\n\t\tjsoncFoldingRangeLimit = sanitizeLimitSetting(settings.json?.jsoncFoldingLimit || foldingRangeLimitDefault);\n\t\tjsonColorDecoratorLimit = sanitizeLimitSetting(settings.json?.jsonColorDecoratorLimit || Number.MAX_VALUE);\n\t\tjsoncColorDecoratorLimit = sanitizeLimitSetting(settings.json?.jsoncColorDecoratorLimit || Number.MAX_VALUE);\n\n\t\t// dynamically enable & disable the formatter\n\t\tif (dynamicFormatterRegistration) {\n\t\t\tconst enableFormatter = settings.json?.format?.enable;\n\t\t\tif (enableFormatter) {\n\t\t\t\tif (!formatterRegistrations) {\n\t\t\t\t\tconst documentSelector = [{ language: 'json' }, { language: 'jsonc' }];\n\t\t\t\t\tformatterRegistrations = [\n\t\t\t\t\t\tconnection.client.register(DocumentRangeFormattingRequest.type, { documentSelector }),\n\t\t\t\t\t\tconnection.client.register(DocumentFormattingRequest.type, { documentSelector })\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t} else if (formatterRegistrations) {\n\t\t\t\tformatterRegistrations.forEach(p => p.then(r => r.dispose()));\n\t\t\t\tformatterRegistrations = null;\n\t\t\t}\n\t\t}\n\t});\n\n\t// The jsonValidation extension configuration has changed\n\tconnection.onNotification(SchemaAssociationNotification.type, associations => {\n\t\tschemaAssociations = associations;\n\t\tupdateConfiguration();\n\t});\n\n\t// A schema has changed\n\tconnection.onNotification(SchemaContentChangeNotification.type, uriOrUris => {\n\t\tlet needsRevalidation = false;\n\t\tif (Array.isArray(uriOrUris)) {\n\t\t\tfor (const uri of uriOrUris) {\n\t\t\t\tif (languageService.resetSchema(uri)) {\n\t\t\t\t\tneedsRevalidation = true;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tneedsRevalidation = languageService.resetSchema(uriOrUris);\n\t\t}\n\t\tif (needsRevalidation) {\n\t\t\tdiagnosticsSupport?.requestRefresh();\n\t\t}\n\t});\n\n\t// Retry schema validation on all open documents\n\tconnection.onRequest(ForceValidateRequest.type, async uri => {\n\t\tconst document = documents.get(uri);\n\t\tif (document) {\n\t\t\tupdateConfiguration();\n\t\t\treturn await validateTextDocument(document);\n\t\t}\n\t\treturn [];\n\t});\n\n\tconnection.onRequest(LanguageStatusRequest.type, async uri => {\n\t\tconst document = documents.get(uri);\n\t\tif (document) {\n\t\t\tconst jsonDocument = getJSONDocument(document);\n\t\t\treturn languageService.getLanguageStatus(document, jsonDocument);\n\t\t} else {\n\t\t\treturn { schemas: [] };\n\t\t}\n\t});\n\n\tconnection.onRequest(DocumentSortingRequest.type, async params => {\n\t\tconst uri = params.uri;\n\t\tconst options = params.options;\n\t\tconst document = documents.get(uri);\n\t\tif (document) {\n\t\t\treturn languageService.sort(document, options);\n\t\t}\n\t\treturn [];\n\t});\n\n\tfunction updateConfiguration() {\n\t\tconst languageSettings = {\n\t\t\tvalidate: validateEnabled,\n\t\t\tallowComments: true,\n\t\t\tschemas: new Array<SchemaConfiguration>()\n\t\t};\n\t\tif (schemaAssociations) {\n\t\t\tif (Array.isArray(schemaAssociations)) {\n\t\t\t\tArray.prototype.push.apply(languageSettings.schemas, schemaAssociations);\n\t\t\t} else {\n\t\t\t\tfor (const pattern in schemaAssociations) {\n\t\t\t\t\tconst association = schemaAssociations[pattern];\n\t\t\t\t\tif (Array.isArray(association)) {\n\t\t\t\t\t\tassociation.forEach(uri => {\n\t\t\t\t\t\t\tlanguageSettings.schemas.push({ uri, fileMatch: [pattern] });\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (jsonConfigurationSettings) {\n\t\t\tjsonConfigurationSettings.forEach((schema, index) => {\n\t\t\t\tlet uri = schema.url;\n\t\t\t\tif (!uri && schema.schema) {\n\t\t\t\t\turi = schema.schema.id || `vscode://schemas/custom/${index}`;\n\t\t\t\t}\n\t\t\t\tif (uri) {\n\t\t\t\t\tlanguageSettings.schemas.push({ uri, fileMatch: schema.fileMatch, schema: schema.schema, folderUri: schema.folderUri });\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tlanguageService.configure(languageSettings);\n\n\t\tdiagnosticsSupport?.requestRefresh();\n\t}\n\n\tasync function validateTextDocument(textDocument: TextDocument): Promise<Diagnostic[]> {\n\t\tif (textDocument.getText().length === 0) {\n\t\t\treturn []; // ignore empty documents\n\t\t}\n\t\tconst jsonDocument = getJSONDocument(textDocument);\n\t\tconst documentSettings: DocumentLanguageSettings = textDocument.languageId === 'jsonc' ? { comments: 'ignore', trailingCommas: 'warning' } : { comments: 'error', trailingCommas: 'error' };\n\t\treturn await languageService.doValidation(textDocument, jsonDocument, documentSettings);\n\t}\n\n\tconnection.onDidChangeWatchedFiles((change) => {\n\t\t// Monitored files have changed in VSCode\n\t\tlet hasChanges = false;\n\t\tchange.changes.forEach(c => {\n\t\t\tif (languageService.resetSchema(c.uri)) {\n\t\t\t\thasChanges = true;\n\t\t\t}\n\t\t});\n\t\tif (hasChanges) {\n\t\t\tdiagnosticsSupport?.requestRefresh();\n\t\t}\n\t});\n\n\tconst jsonDocuments = getLanguageModelCache<JSONDocument>(10, 60, document => languageService.parseJSONDocument(document));\n\tdocuments.onDidClose(e => {\n\t\tjsonDocuments.onDocumentRemoved(e.document);\n\t});\n\tconnection.onShutdown(() => {\n\t\tjsonDocuments.dispose();\n\t});\n\n\tfunction getJSONDocument(document: TextDocument): JSONDocument {\n\t\treturn jsonDocuments.get(document);\n\t}\n\n\tconnection.onCompletion((textDocumentPosition, token) => {\n\t\treturn runSafeAsync(runtime, async () => {\n\t\t\tconst document = documents.get(textDocumentPosition.textDocument.uri);\n\t\t\tif (document) {\n\t\t\t\tconst jsonDocument = getJSONDocument(document);\n\t\t\t\treturn languageService.doComplete(document, textDocumentPosition.position, jsonDocument);\n\t\t\t}\n\t\t\treturn null;\n\t\t}, null, `Error while computing completions for ${textDocumentPosition.textDocument.uri}`, token);\n\t});\n\n\tconnection.onHover((textDocumentPositionParams, token) => {\n\t\treturn runSafeAsync(runtime, async () => {\n\t\t\tconst document = documents.get(textDocumentPositionParams.textDocument.uri);\n\t\t\tif (document) {\n\t\t\t\tconst jsonDocument = getJSONDocument(document);\n\t\t\t\treturn languageService.doHover(document, textDocumentPositionParams.position, jsonDocument);\n\t\t\t}\n\t\t\treturn null;\n\t\t}, null, `Error while computing hover for ${textDocumentPositionParams.textDocument.uri}`, token);\n\t});\n\n\tconnection.onDocumentSymbol((documentSymbolParams, token) => {\n\t\treturn runSafe(runtime, () => {\n\t\t\tconst document = documents.get(documentSymbolParams.textDocument.uri);\n\t\t\tif (document) {\n\t\t\t\tconst jsonDocument = getJSONDocument(document);\n\t\t\t\tif (hierarchicalDocumentSymbolSupport) {\n\t\t\t\t\treturn languageService.findDocumentSymbols2(document, jsonDocument, { resultLimit });\n\t\t\t\t} else {\n\t\t\t\t\treturn languageService.findDocumentSymbols(document, jsonDocument, { resultLimit });\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [];\n\t\t}, [], `Error while computing document symbols for ${documentSymbolParams.textDocument.uri}`, token);\n\t});\n\n\tconnection.onCodeAction((codeActionParams, token) => {\n\t\treturn runSafeAsync(runtime, async () => {\n\t\t\tconst document = documents.get(codeActionParams.textDocument.uri);\n\t\t\tif (document) {\n\t\t\t\tconst sortCodeAction = CodeAction.create('Sort JSON', CodeActionKind.Source.concat('.sort', '.json'));\n\t\t\t\tsortCodeAction.command = {\n\t\t\t\t\tcommand: 'json.sort',\n\t\t\t\t\ttitle: l10n.t('Sort JSON')\n\t\t\t\t};\n\t\t\t\treturn [sortCodeAction];\n\t\t\t}\n\t\t\treturn [];\n\t\t}, [], `Error while computing code actions for ${codeActionParams.textDocument.uri}`, token);\n\t});\n\n\tfunction onFormat(textDocument: TextDocumentIdentifier, range: Range | undefined, options: FormattingOptions): TextEdit[] {\n\n\t\toptions.keepLines = keepLinesEnabled;\n\t\tconst document = documents.get(textDocument.uri);\n\t\tif (document) {\n\t\t\tconst edits = languageService.format(document, range ?? getFullRange(document), options);\n\t\t\tif (edits.length > formatterMaxNumberOfEdits) {\n\t\t\t\tconst newText = TextDocument.applyEdits(document, edits);\n\t\t\t\treturn [TextEdit.replace(getFullRange(document), newText)];\n\t\t\t}\n\t\t\treturn edits;\n\t\t}\n\t\treturn [];\n\t}\n\n\tconnection.onDocumentRangeFormatting((formatParams, token) => {\n\t\treturn runSafe(runtime, () => onFormat(formatParams.textDocument, formatParams.range, formatParams.options), [], `Error while formatting range for ${formatParams.textDocument.uri}`, token);\n\t});\n\n\tconnection.onDocumentFormatting((formatParams, token) => {\n\t\treturn runSafe(runtime, () => onFormat(formatParams.textDocument, undefined, formatParams.options), [], `Error while formatting ${formatParams.textDocument.uri}`, token);\n\t});\n\n\tconnection.onDocumentColor((params, token) => {\n\t\treturn runSafeAsync(runtime, async () => {\n\t\t\tconst document = documents.get(params.textDocument.uri);\n\t\t\tif (document) {\n\n\t\t\t\tconst jsonDocument = getJSONDocument(document);\n\t\t\t\tconst resultLimit = document.languageId === 'jsonc' ? jsoncColorDecoratorLimit : jsonColorDecoratorLimit;\n\t\t\t\treturn languageService.findDocumentColors(document, jsonDocument, { resultLimit });\n\t\t\t}\n\t\t\treturn [];\n\t\t}, [], `Error while computing document colors for ${params.textDocument.uri}`, token);\n\t});\n\n\tconnection.onColorPresentation((params, token) => {\n\t\treturn runSafe(runtime, () => {\n\t\t\tconst document = documents.get(params.textDocument.uri);\n\t\t\tif (document) {\n\t\t\t\tconst jsonDocument = getJSONDocument(document);\n\t\t\t\treturn languageService.getColorPresentations(document, jsonDocument, params.color, params.range);\n\t\t\t}\n\t\t\treturn [];\n\t\t}, [], `Error while computing color presentations for ${params.textDocument.uri}`, token);\n\t});\n\n\tconnection.onFoldingRanges((params, token) => {\n\t\treturn runSafe(runtime, () => {\n\t\t\tconst document = documents.get(params.textDocument.uri);\n\t\t\tif (document) {\n\t\t\t\tconst rangeLimit = document.languageId === 'jsonc' ? jsoncFoldingRangeLimit : jsonFoldingRangeLimit;\n\t\t\t\treturn languageService.getFoldingRanges(document, { rangeLimit });\n\t\t\t}\n\t\t\treturn null;\n\t\t}, null, `Error while computing folding ranges for ${params.textDocument.uri}`, token);\n\t});\n\n\n\tconnection.onSelectionRanges((params, token) => {\n\t\treturn runSafe(runtime, () => {\n\t\t\tconst document = documents.get(params.textDocument.uri);\n\t\t\tif (document) {\n\t\t\t\tconst jsonDocument = getJSONDocument(document);\n\t\t\t\treturn languageService.getSelectionRanges(document, params.positions, jsonDocument);\n\t\t\t}\n\t\t\treturn [];\n\t\t}, [], `Error while computing selection ranges for ${params.textDocument.uri}`, token);\n\t});\n\n\tconnection.onDocumentLinks((params, token) => {\n\t\treturn runSafeAsync(runtime, async () => {\n\t\t\tconst document = documents.get(params.textDocument.uri);\n\t\t\tif (document) {\n\t\t\t\tconst jsonDocument = getJSONDocument(document);\n\t\t\t\treturn languageService.findLinks(document, jsonDocument);\n\t\t\t}\n\t\t\treturn [];\n\t\t}, [], `Error while computing links for ${params.textDocument.uri}`, token);\n\t});\n\n\t// Listen on the connection\n\tconnection.listen();\n}\n\nfunction getFullRange(document: TextDocument): Range {\n\treturn Range.create(Position.create(0, 0), document.positionAt(document.getText().length));\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { TextDocument } from 'vscode-languageserver';\n\nexport interface LanguageModelCache<T> {\n\tget(document: TextDocument): T;\n\tonDocumentRemoved(document: TextDocument): void;\n\tdispose(): void;\n}\n\nexport function getLanguageModelCache<T>(maxEntries: number, cleanupIntervalTimeInSec: number, parse: (document: TextDocument) => T): LanguageModelCache<T> {\n\tlet languageModels: { [uri: string]: { version: number; languageId: string; cTime: number; languageModel: T } } = {};\n\tlet nModels = 0;\n\n\tlet cleanupInterval: NodeJS.Timeout | undefined = undefined;\n\tif (cleanupIntervalTimeInSec > 0) {\n\t\tcleanupInterval = setInterval(() => {\n\t\t\tconst cutoffTime = Date.now() - cleanupIntervalTimeInSec * 1000;\n\t\t\tconst uris = Object.keys(languageModels);\n\t\t\tfor (const uri of uris) {\n\t\t\t\tconst languageModelInfo = languageModels[uri];\n\t\t\t\tif (languageModelInfo.cTime < cutoffTime) {\n\t\t\t\t\tdelete languageModels[uri];\n\t\t\t\t\tnModels--;\n\t\t\t\t}\n\t\t\t}\n\t\t}, cleanupIntervalTimeInSec * 1000);\n\t}\n\n\treturn {\n\t\tget(document: TextDocument): T {\n\t\t\tconst version = document.version;\n\t\t\tconst languageId = document.languageId;\n\t\t\tconst languageModelInfo = languageModels[document.uri];\n\t\t\tif (languageModelInfo && languageModelInfo.version === version && languageModelInfo.languageId === languageId) {\n\t\t\t\tlanguageModelInfo.cTime = Date.now();\n\t\t\t\treturn languageModelInfo.languageModel;\n\t\t\t}\n\t\t\tconst languageModel = parse(document);\n\t\t\tlanguageModels[document.uri] = { languageModel, version, languageId, cTime: Date.now() };\n\t\t\tif (!languageModelInfo) {\n\t\t\t\tnModels++;\n\t\t\t}\n\n\t\t\tif (nModels === maxEntries) {\n\t\t\t\tlet oldestTime = Number.MAX_VALUE;\n\t\t\t\tlet oldestUri = null;\n\t\t\t\tfor (const uri in languageModels) {\n\t\t\t\t\tconst languageModelInfo = languageModels[uri];\n\t\t\t\t\tif (languageModelInfo.cTime < oldestTime) {\n\t\t\t\t\t\toldestUri = uri;\n\t\t\t\t\t\toldestTime = languageModelInfo.cTime;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (oldestUri) {\n\t\t\t\t\tdelete languageModels[oldestUri];\n\t\t\t\t\tnModels--;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn languageModel;\n\n\t\t},\n\t\tonDocumentRemoved(document: TextDocument) {\n\t\t\tconst uri = document.uri;\n\t\t\tif (languageModels[uri]) {\n\t\t\t\tdelete languageModels[uri];\n\t\t\t\tnModels--;\n\t\t\t}\n\t\t},\n\t\tdispose() {\n\t\t\tif (typeof cleanupInterval !== 'undefined') {\n\t\t\t\tclearInterval(cleanupInterval);\n\t\t\t\tcleanupInterval = undefined;\n\t\t\t\tlanguageModels = {};\n\t\t\t\tnModels = 0;\n\t\t\t}\n\t\t}\n\t};\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createConnection, Connection, Disposable } from 'vscode-languageserver/node';\nimport { formatError } from '../utils/runner';\nimport { RequestService, RuntimeEnvironment, startServer } from '../jsonServer';\n\nimport { xhr, XHRResponse, configure as configureHttpRequests, getErrorStatusDescription } from 'request-light';\nimport { URI as Uri } from 'vscode-uri';\nimport * as fs from 'fs';\n\n// Create a connection for the server.\nconst connection: Connection = createConnection();\n\nconsole.log = connection.console.log.bind(connection.console);\nconsole.error = connection.console.error.bind(connection.console);\n\nprocess.on('unhandledRejection', (e: any) => {\n\tconnection.console.error(formatError(`Unhandled exception`, e));\n});\n\nfunction getHTTPRequestService(): RequestService {\n\treturn {\n\t\tgetContent(uri: string, _encoding?: string) {\n\t\t\tconst headers = { 'Accept-Encoding': 'gzip, deflate' };\n\t\t\treturn xhr({ url: uri, followRedirects: 5, headers }).then(response => {\n\t\t\t\treturn response.responseText;\n\t\t\t}, (error: XHRResponse) => {\n\t\t\t\treturn Promise.reject(error.responseText || getErrorStatusDescription(error.status) || error.toString());\n\t\t\t});\n\t\t}\n\t};\n}\n\nfunction getFileRequestService(): RequestService {\n\treturn {\n\t\tgetContent(location: string, encoding?: BufferEncoding) {\n\t\t\treturn new Promise((c, e) => {\n\t\t\t\tconst uri = Uri.parse(location);\n\t\t\t\tfs.readFile(uri.fsPath, encoding, (err, buf) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn e(err);\n\t\t\t\t\t}\n\t\t\t\t\tc(buf.toString());\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n}\n\nconst runtime: RuntimeEnvironment = {\n\ttimer: {\n\t\tsetImmediate(callback: (...args: any[]) => void, ...args: any[]): Disposable {\n\t\t\tconst handle = setImmediate(callback, ...args);\n\t\t\treturn { dispose: () => clearImmediate(handle) };\n\t\t},\n\t\tsetTimeout(callback: (...args: any[]) => void, ms: number, ...args: any[]): Disposable {\n\t\t\tconst handle = setTimeout(callback, ms, ...args);\n\t\t\treturn { dispose: () => clearTimeout(handle) };\n\t\t}\n\t},\n\tfile: getFileRequestService(),\n\thttp: getHTTPRequestService(),\n\tconfigureHttpRequests\n};\n\n\n\nstartServer(connection, runtime);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken, ResponseError, LSPErrorCodes } from 'vscode-languageserver';\nimport { RuntimeEnvironment } from '../jsonServer';\n\nexport function formatError(message: string, err: any): string {\n\tif (err instanceof Error) {\n\t\tconst error = <Error>err;\n\t\treturn `${message}: ${error.message}\\n${error.stack}`;\n\t} else if (typeof err === 'string') {\n\t\treturn `${message}: ${err}`;\n\t} else if (err) {\n\t\treturn `${message}: ${err.toString()}`;\n\t}\n\treturn message;\n}\n\nexport function runSafeAsync<T>(runtime: RuntimeEnvironment, func: () => Thenable<T>, errorVal: T, errorMessage: string, token: CancellationToken): Thenable<T | ResponseError<any>> {\n\treturn new Promise<T | ResponseError<any>>((resolve) => {\n\t\truntime.timer.setImmediate(() => {\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\tresolve(cancelValue());\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn func().then(result => {\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\tresolve(cancelValue());\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t}, e => {\n\t\t\t\tconsole.error(formatError(errorMessage, e));\n\t\t\t\tresolve(errorVal);\n\t\t\t});\n\t\t});\n\t});\n}\n\nexport function runSafe<T, E>(runtime: RuntimeEnvironment, func: () => T, errorVal: T, errorMessage: string, token: CancellationToken): Thenable<T | ResponseError<E>> {\n\treturn new Promise<T | ResponseError<E>>((resolve) => {\n\t\truntime.timer.setImmediate(() => {\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\tresolve(cancelValue());\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tconst result = func();\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\tresolve(cancelValue());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(formatError(errorMessage, e));\n\t\t\t\t\tresolve(errorVal);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\nfunction cancelValue<E>() {\n\tconsole.log('cancelled');\n\treturn new ResponseError<E>(LSPErrorCodes.RequestCancelled, 'Request cancelled');\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken, Connection, Diagnostic, Disposable, DocumentDiagnosticParams, DocumentDiagnosticReport, DocumentDiagnosticReportKind, TextDocuments } from 'vscode-languageserver';\nimport { TextDocument } from 'vscode-json-languageservice';\nimport { formatError, runSafeAsync } from './runner';\nimport { RuntimeEnvironment } from '../jsonServer';\n\nexport type Validator = (textDocument: TextDocument) => Promise<Diagnostic[]>;\nexport type DiagnosticsSupport = {\n\tdispose(): void;\n\trequestRefresh(): void;\n};\n\nexport function registerDiagnosticsPushSupport(documents: TextDocuments<TextDocument>, connection: Connection, runtime: RuntimeEnvironment, validate: Validator): DiagnosticsSupport {\n\n\tconst pendingValidationRequests: { [uri: string]: Disposable } = {};\n\tconst validationDelayMs = 500;\n\n\tconst disposables: Disposable[] = [];\n\n\t// The content of a text document has changed. This event is emitted\n\t// when the text document first opened or when its content has changed.\n\tdocuments.onDidChangeContent(change => {\n\t\ttriggerValidation(change.document);\n\t}, undefined, disposables);\n\n\t// a document has closed: clear all diagnostics\n\tdocuments.onDidClose(event => {\n\t\tcleanPendingValidation(event.document);\n\t\tconnection.sendDiagnostics({ uri: event.document.uri, diagnostics: [] });\n\t}, undefined, disposables);\n\n\tfunction cleanPendingValidation(textDocument: TextDocument): void {\n\t\tconst request = pendingValidationRequests[textDocument.uri];\n\t\tif (request) {\n\t\t\trequest.dispose();\n\t\t\tdelete pendingValidationRequests[textDocument.uri];\n\t\t}\n\t}\n\n\tfunction triggerValidation(textDocument: TextDocument): void {\n\t\tcleanPendingValidation(textDocument);\n\t\tconst request = pendingValidationRequests[textDocument.uri] = runtime.timer.setTimeout(async () => {\n\t\t\tif (request === pendingValidationRequests[textDocument.uri]) {\n\t\t\t\ttry {\n\t\t\t\t\tconst diagnostics = await validate(textDocument);\n\t\t\t\t\tif (request === pendingValidationRequests[textDocument.uri]) {\n\t\t\t\t\t\tconnection.sendDiagnostics({ uri: textDocument.uri, diagnostics });\n\t\t\t\t\t}\n\t\t\t\t\tdelete pendingValidationRequests[textDocument.uri];\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconnection.console.error(formatError(`Error while validating ${textDocument.uri}`, e));\n\t\t\t\t}\n\t\t\t}\n\t\t}, validationDelayMs);\n\t}\n\n\treturn {\n\t\trequestRefresh: () => {\n\t\t\tdocuments.all().forEach(triggerValidation);\n\t\t},\n\t\tdispose: () => {\n\t\t\tdisposables.forEach(d => d.dispose());\n\t\t\tdisposables.length = 0;\n\t\t\tconst keys = Object.keys(pendingValidationRequests);\n\t\t\tfor (const key of keys) {\n\t\t\t\tpendingValidationRequests[key].dispose();\n\t\t\t\tdelete pendingValidationRequests[key];\n\t\t\t}\n\t\t}\n\t};\n}\n\nexport function registerDiagnosticsPullSupport(documents: TextDocuments<TextDocument>, connection: Connection, runtime: RuntimeEnvironment, validate: Validator): DiagnosticsSupport {\n\n\tfunction newDocumentDiagnosticReport(diagnostics: Diagnostic[]): DocumentDiagnosticReport {\n\t\treturn {\n\t\t\tkind: DocumentDiagnosticReportKind.Full,\n\t\t\titems: diagnostics\n\t\t};\n\t}\n\n\tconst registration = connection.languages.diagnostics.on(async (params: DocumentDiagnosticParams, token: CancellationToken) => {\n\t\treturn runSafeAsync(runtime, async () => {\n\t\t\tconst document = documents.get(params.textDocument.uri);\n\t\t\tif (document) {\n\t\t\t\treturn newDocumentDiagnosticReport(await validate(document));\n\t\t\t}\n\t\t\treturn newDocumentDiagnosticReport([]);\n\n\t\t}, newDocumentDiagnosticReport([]), `Error while computing diagnostics for ${params.textDocument.uri}`, token);\n\t});\n\n\tfunction requestRefresh(): void {\n\t\tconnection.languages.diagnostics.refresh();\n\t}\n\n\treturn {\n\t\trequestRefresh,\n\t\tdispose: () => {\n\t\t\tregistration.dispose();\n\t\t}\n\t};\n\n}\n"],"names":["connection","runtime","getSchemaRequestService","handledSchemas","builtInHandlers","protocol","file","http","uri","substr","indexOf","builtInHandler","getContent","sendRequest","VSCodeContentRequest","type","then","responseText","error","Promise","reject","message","languageService","getLanguageService","workspaceContext","contributions","clientCapabilities","ClientCapabilities","LATEST","documents","TextDocuments","TextDocument","listen","diagnosticsSupport","clientSnippetSupport","dynamicFormatterRegistration","hierarchicalDocumentSymbolSupport","foldingRangeLimitDefault","Number","MAX_VALUE","resultLimit","jsonFoldingRangeLimit","jsoncFoldingRangeLimit","jsonColorDecoratorLimit","jsoncColorDecoratorLimit","formatterMaxNumberOfEdits","onInitialize","params","initializationOptions","handledProtocols","handledSchemaProtocols","getClientCapability","name","def","keys","split","c","capabilities","i","length","hasOwnProperty","schemaRequestService","provideFormatter","customCapabilities","rangeFormatting","editLimit","supportsDiagnosticPull","undefined","registerDiagnosticsPushSupport","validateTextDocument","registerDiagnosticsPullSupport","textDocumentSync","TextDocumentSyncKind","Incremental","completionProvider","resolveProvider","triggerCharacters","hoverProvider","documentSymbolProvider","documentRangeFormattingProvider","documentFormattingProvider","colorProvider","foldingRangeProvider","selectionRangeProvider","documentLinkProvider","diagnosticProvider","documentSelector","interFileDependencies","workspaceDiagnostics","codeActionProvider","jsonConfigurationSettings","schemaAssociations","formatterRegistrations","validateEnabled","keepLinesEnabled","updateConfiguration","languageSettings","validate","allowComments","schemas","Array","isArray","prototype","push","apply","pattern","association","forEach","fileMatch","schema","index","url","id","folderUri","configure","requestRefresh","async","textDocument","getText","jsonDocument","getJSONDocument","documentSettings","languageId","comments","trailingCommas","doValidation","onDidChangeConfiguration","change","settings","configureHttpRequests","proxy","proxyStrictSSL","json","enable","keepLines","sanitizeLimitSetting","settingValue","Math","trunc","max","jsonFoldingLimit","jsoncFoldingLimit","enableFormatter","format","language","client","register","DocumentRangeFormattingRequest","DocumentFormattingRequest","p","r","dispose","onNotification","SchemaAssociationNotification","associations","SchemaContentChangeNotification","uriOrUris","needsRevalidation","resetSchema","onRequest","ForceValidateRequest","document","get","LanguageStatusRequest","getLanguageStatus","DocumentSortingRequest","options","sort","onDidChangeWatchedFiles","hasChanges","changes","jsonDocuments","getLanguageModelCache","parseJSONDocument","onFormat","range","edits","getFullRange","newText","applyEdits","TextEdit","replace","onDidClose","e","onDocumentRemoved","onShutdown","onCompletion","textDocumentPosition","token","runSafeAsync","doComplete","position","onHover","textDocumentPositionParams","doHover","onDocumentSymbol","documentSymbolParams","runSafe","findDocumentSymbols2","findDocumentSymbols","onCodeAction","codeActionParams","sortCodeAction","CodeAction","create","CodeActionKind","Source","concat","command","title","l10n","t","onDocumentRangeFormatting","formatParams","onDocumentFormatting","onDocumentColor","findDocumentColors","onColorPresentation","getColorPresentations","color","onFoldingRanges","rangeLimit","getFoldingRanges","onSelectionRanges","getSelectionRanges","positions","onDocumentLinks","findLinks","NotificationType","RequestType","resolveRelativePath","relativePath","resource","base","substring","lastIndexOf","Utils","resolvePath","URI","parse","toString","Range","Position","positionAt","maxEntries","cleanupIntervalTimeInSec","cleanupInterval","languageModels","nModels","setInterval","cutoffTime","Date","now","uris","Object","cTime","version","languageModelInfo","languageModel","oldestTime","oldestUri","clearInterval","createConnection","console","log","bind","process","on","formatError","timer","setImmediate","callback","args","handle","clearImmediate","setTimeout","ms","clearTimeout","location","encoding","fs","readFile","fsPath","err","buf","_encoding","xhr","followRedirects","headers","response","getErrorStatusDescription","status","startServer","func","errorVal","errorMessage","resolve","isCancellationRequested","result","cancelValue","Error","stack","ResponseError","LSPErrorCodes","RequestCancelled","pendingValidationRequests","disposables","cleanPendingValidation","request","triggerValidation","diagnostics","sendDiagnostics","onDidChangeContent","event","all","d","key","newDocumentDiagnosticReport","kind","DocumentDiagnosticReportKind","Full","items","registration","languages","refresh"],"sourceRoot":""}