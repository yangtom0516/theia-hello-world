{"version":3,"file":"main.js","mappings":"23BAoWA,oBAAyBA,GACxBC,EAAW,IAAIC,EACfD,EAASE,OACV,EAEA,wBACCF,EAASG,SACV,EAtWA,kBACA,YACA,YACA,YAIA,SAASC,EAAOC,GACf,OAAO,IAAIC,SAAiB,CAACC,EAASC,KACrCC,EAAGL,OAAOC,GAAOK,IAChBH,EAAQG,EAAM,GACb,GAEJ,CAaA,MAAMC,EAAuB,CAAC,QAAS,UAAW,SAClD,SAASC,EAAYC,GACpB,IAAK,MAAMC,KAAaH,EACvB,IAAiC,IAA7BE,EAAKE,QAAQD,GAChB,OAAO,EAGT,OAAO,CACR,CAEA,MAAME,EAAsB,CAAC,QAC7B,SAASC,EAAWJ,GACnB,IAAK,MAAMK,KAAYF,EACtB,IAAgC,IAA5BH,EAAKE,QAAQG,GAChB,OAAO,EAGT,OAAO,CACR,CAEA,IAAIC,EAgTAnB,EA/SJ,SAASoB,IAIR,OAHKD,IACJA,EAAWE,EAAOC,OAAOC,oBAAoB,yBAEvCJ,CACR,CAEA,SAASK,IACRH,EAAOC,OAAOG,mBAAmBJ,EAAOK,KAAKC,EAAE,qEAC9CN,EAAOK,KAAKC,EAAE,iBAAiBC,MAAK,KACnCR,IAAmBS,MAAK,EAAK,GAEhC,CAOAC,eAAeC,EAAiBC,GAC/B,IAAIC,EACJ,MAAMC,EAAWC,QAAQD,SAQzB,OANCD,EADgB,UAAbC,SAA8B9B,EAAOgC,EAAKC,KAAKL,EAAW,eAAgB,OAAQ,cAC3EI,EAAKC,KAAK,IAAK,eAAgB,OAAQ,aACzB,UAAbH,GAAqC,WAAbA,UAAgC9B,EAAOgC,EAAKC,KAAKL,EAAW,eAAgB,OAAQ,UAG7G,QAFAI,EAAKC,KAAK,IAAK,eAAgB,OAAQ,SAI3CJ,CACR,CAEA,MAAMK,EAKL,WAAAC,CACSC,EACAC,GADA,KAAAD,iBAAAA,EACA,KAAAC,cAAAA,CACT,CAEA,mBAAWC,GACV,OAAOC,KAAKH,gBACb,CAEO,SAAAI,GACN,MAA+G,OAAxGvB,EAAOwB,UAAUC,iBAAiB,QAASH,KAAKH,iBAAiBO,KAAKC,IAAgB,aAC9F,CAEO,KAAA9C,GACN,MAAM+C,EAAUb,EAAKC,KAAKM,KAAKH,iBAAiBO,IAAIG,OAAQ,kCAC5DP,KAAKQ,YAAc9B,EAAOwB,UAAUO,wBAAwBH,GAC5DN,KAAKQ,YAAYE,aAAY,IAAMV,KAAKW,aAAUC,IAClDZ,KAAKQ,YAAYK,aAAY,IAAMb,KAAKW,aAAUC,IAClDZ,KAAKQ,YAAYM,aAAY,IAAMd,KAAKW,aAAUC,GACnD,CAEO,cAAMG,GACZ,OAAIf,KAAKC,aACHD,KAAKW,UACTX,KAAKW,QAAUX,KAAKgB,gBAEdhB,KAAKW,SAEL,EAET,CAEO,aAAMM,CAAQC,GACpB,MAAMC,EAAsBD,EAAME,WAC5BC,EAAYF,EAAeG,KACjC,GAAID,EAAW,CACd,MAAME,EAAwC,CAAEC,IAAKxB,KAAKD,gBAAgBK,IAAIG,QACxEkB,EAAS,QAIf,OAHyC,IAA5BJ,EAAUjD,QAAQ,KAC5B,IAAIM,EAAOgD,KAAKP,EAAgBnB,KAAKD,gBAAiBsB,EAAWI,EAAQ,IAAI/C,EAAOiD,eAAe,SAAS3B,KAAKF,gBAAiB,CAACuB,KAAcF,EAAeS,MAAOL,IACvK,IAAI7C,EAAOgD,KAAKP,EAAgBnB,KAAKD,gBAAiBsB,EAAWI,EAAQ,IAAI/C,EAAOiD,eAAe,SAAS3B,KAAKF,gBAAiB,CAAC,IAAIuB,QAAiBF,EAAeS,MAAOL,GAElL,CAED,CAEQ,kBAAMP,GACb,MAAM3B,EAAgD,SAArCW,KAAKH,iBAAiBO,IAAIyB,OAAoB7B,KAAKH,iBAAiBO,IAAIG,YAASK,EAC5FkB,EAA4B,GAClC,IAAKzC,EACJ,OAAOyC,EAER,UAAWrE,EAAOgC,EAAKC,KAAKL,EAAU,yBAA2B5B,EAAOgC,EAAKC,KAAKL,EAAU,iBAC3F,OAAOyC,EAGR,MAAMC,EAAc,SAAS/B,KAAKF,kCAClC,IACC,MAAM,OAAEkC,EAAM,OAAEC,SA/HL3C,EA+H2ByC,EA/HVR,EA+HuB,CAAEC,IAAKnC,GA9HrD,IAAI1B,SAA4C,CAACC,EAASsE,KAChEC,EAAGC,KAAK9C,EAASiC,GAAS,CAACc,EAAOL,EAAQC,KACrCI,GACHH,EAAO,CAAEG,QAAOL,SAAQC,WAEzBrE,EAAQ,CAAEoE,SAAQC,UAAS,GAC1B,KAyHGA,IACHxD,IAAmB6D,WAAWL,GAC9BpD,KAED,MAAM0D,EAAwB,GAC9B,GAAIP,EAAQ,CAaX,MAAMQ,EAAQR,EAAOS,MAAM,aAC3B,IAAIC,GAAa,EACbC,GAAW,EACf,IAAK,MAAMC,KAAQJ,EAClB,GAAoB,IAAhBI,EAAKC,OAGT,GAAKH,GAAeC,GAIb,GAAID,IAAeC,EACzB,GAAyD,IAArDC,EAAKxE,QAAQ,oCAChBuE,GAAW,MACL,CACN,MACMG,EADS,oBACQV,KAAKQ,GAC5B,GAAIE,GAA8B,IAAnBA,EAAQD,OAAc,CACpC,MAAM3E,EAAO4E,EAAQ,GACfC,EAA4B,CACjCC,KAAM,QACN1B,KAAMpD,GAEDuD,EAAS,QACTF,EAAwC,CAAEC,IAAKxB,KAAKD,gBAAgBK,IAAIG,QACxEe,GAA8B,IAAvBpD,EAAKE,QAAQ,KACvB,IAAIM,EAAOgD,KAAKqB,EAAM/C,KAAKD,gBAAiB7B,EAAMuD,EAAQ,IAAI/C,EAAOiD,eAAe,SAAS3B,KAAKF,iBAAiB5B,IAAQqD,IAC3H,IAAI7C,EAAOgD,KAAKqB,EAAM/C,KAAKD,gBAAiB7B,EAAMuD,EAAQ,IAAI/C,EAAOiD,eAAe,SAAS3B,KAAKF,kBAAkB5B,KAASqD,IAChIgB,EAAOU,KAAK3B,GACZ,MAAM4B,EAAoBhF,EAAKiF,cAC3BlF,EAAYiF,GACf5B,EAAK8B,MAAQ1E,EAAO2E,UAAUC,MACpBhF,EAAW4E,KACrB5B,EAAK8B,MAAQ1E,EAAO2E,UAAUE,KAEhC,CACD,OA5BwC,IAApCX,EAAKxE,QAAQ,qBAChBsE,GAAa,EA8BjB,CACA,OAAOH,CACR,CAAE,MAAOiB,GACR,MAAMC,EAAUhF,IAShB,OARI+E,EAAIvB,QACPwB,EAAQnB,WAAWkB,EAAIvB,QAEpBuB,EAAIxB,QACPyB,EAAQnB,WAAWkB,EAAIxB,QAExByB,EAAQnB,WAAW5D,EAAOK,KAAKC,EAAE,wIACjCH,IACOiD,CACR,CAtMF,IAAcxC,EAAiBiC,CAuM9B,CAEO,OAAA/D,GACNwC,KAAKW,aAAUC,EACXZ,KAAKQ,aACRR,KAAKQ,YAAYhD,SAEnB,EAGD,MAAMF,EAKL,WAAAsC,GAFQ,KAAA8D,UAAyC,IAAIC,GAGrD,CAEO,KAAApG,GACN,MAAMqG,EAAUlF,EAAOwB,UAAU2D,iBAC7BD,GACH5D,KAAK8D,uBAAuBF,EAAS,IAEtClF,EAAOwB,UAAU6D,6BAA6BC,GAAUhE,KAAK8D,uBAAuBE,EAAMC,MAAOD,EAAME,WACvGxF,EAAOwB,UAAUiE,yBAAyBnE,KAAKoE,oBAAqBpE,KACrE,CAEO,OAAAxC,GACFwC,KAAKqE,eACRrE,KAAKqE,aAAa7G,UAClBwC,KAAKqE,kBAAezD,GAErBZ,KAAK0D,UAAUY,OAChB,CAEQ,sBAAAR,CAAuBG,EAA0CC,GACxE,IAAK,MAAMK,KAAUL,EAAS,CAC7B,MAAM7G,EAAW2C,KAAK0D,UAAUrD,IAAIkE,EAAOnE,IAAIoE,YAC3CnH,IACHA,EAASG,UACTwC,KAAK0D,UAAUe,OAAOF,EAAOnE,IAAIoE,YAEnC,CACA,IAAK,MAAME,KAAOT,EAAO,CACxB,MAAM5G,EAAW,IAAIsC,EAAe+E,EAAKtF,EAAiBsF,EAAItE,IAAIG,SAClEP,KAAK0D,UAAUiB,IAAID,EAAItE,IAAIoE,WAAYnH,GACnCA,EAAS4C,aACZ5C,EAASE,OAEX,CACAyC,KAAK4E,gBACN,CAEQ,mBAAAR,GACP,IAAK,MAAM/G,KAAY2C,KAAK0D,UAAUmB,SACrCxH,EAASG,UACTwC,KAAK0D,UAAUe,OAAOpH,EAAS0C,gBAAgBK,IAAIoE,YAEpD,MAAMZ,EAAUlF,EAAOwB,UAAU2D,iBACjC,GAAID,EACH,IAAK,MAAMkB,KAAUlB,EACpB,IAAK5D,KAAK0D,UAAUqB,IAAID,EAAO1E,IAAIoE,YAAa,CAC/C,MAAMnH,EAAW,IAAIsC,EAAemF,EAAQ1F,EAAiB0F,EAAO1E,IAAIG,SACxEP,KAAK0D,UAAUiB,IAAIG,EAAO1E,IAAIoE,WAAYnH,GACtCA,EAAS4C,aACZ5C,EAASE,OAEX,CAGFyC,KAAK4E,gBACN,CAEQ,cAAAA,GACP,IAAK5E,KAAKqE,cAAgBrE,KAAK0D,UAAUsB,KAAO,EAAG,CAClD,MAAMC,EAAcjF,KACpBA,KAAKqE,aAAe3F,EAAOwG,MAAMC,qBAAqB,QAAS,CAC9DC,aAAc,IACNH,EAAYlE,WAEpBsE,YAAYnE,GACJ+D,EAAYhE,QAAQC,IAG9B,MACSlB,KAAKqE,cAAwC,IAAxBrE,KAAK0D,UAAUsB,OAC5ChF,KAAKqE,aAAa7G,UAClBwC,KAAKqE,kBAAezD,EAEtB,CAEO,QAAAG,GACN,OAAOf,KAAKgB,cACb,CAEQ,YAAAA,GACP,GAA4B,IAAxBhB,KAAK0D,UAAUsB,KAClB,OAAOrH,QAAQC,QAAQ,IACjB,GAA4B,IAAxBoC,KAAK0D,UAAUsB,KACzB,OAAOhF,KAAK0D,UAAUmB,SAASS,OAAOvH,MAAOgD,WACvC,CACN,MAAMwE,EAAqC,GAC3C,IAAK,MAAMlI,KAAY2C,KAAK0D,UAAUmB,SACrCU,EAAStC,KAAK5F,EAAS0D,WAAW9B,MAAMlB,GAAUA,IAAO,IAAM,MAEhE,OAAOJ,QAAQ6H,IAAID,GAAUtG,MAAM4F,IAClC,MAAMtC,EAAwB,GAC9B,IAAK,MAAM2C,KAASL,EACfK,GAASA,EAAMrC,OAAS,GAC3BN,EAAOU,QAAQiC,GAGjB,OAAO3C,CAAM,GAEf,CACD,CAEO,aAAMtB,CAAQK,GACpB,GAA4B,IAAxBtB,KAAK0D,UAAUsB,KAAnB,CAEO,GAA4B,IAAxBhF,KAAK0D,UAAUsB,KACzB,OAAOhF,KAAK0D,UAAUmB,SAASS,OAAOvH,MAAOkD,QAAQK,GAErD,GAAKA,EAAKmE,QAAU/G,EAAOgH,UAAUC,WAAerE,EAAKmE,QAAU/G,EAAOgH,UAAUE,QAEzEtE,EAAKmE,MAAO,CACtB,MAAMpI,EAAW2C,KAAK0D,UAAUrD,IAAIiB,EAAKmE,MAAMrF,IAAIoE,YACnD,GAAInH,EACH,OAAOA,EAAS4D,QAAQK,EAE1B,CAED,CACD,E,UChWDuE,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,gB,UCAzBF,EAAOC,QAAUC,QAAQ,K,UCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBvF,IAAjBwF,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAO,EAAoBF,GAAUG,KAAKT,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://grunt/./src/main.ts","webpack://grunt/external commonjs \"vscode\"","webpack://grunt/external node-commonjs \"child_process\"","webpack://grunt/external node-commonjs \"fs\"","webpack://grunt/external node-commonjs \"path\"","webpack://grunt/webpack/bootstrap","webpack://grunt/webpack/startup"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport * as cp from 'child_process';\nimport * as vscode from 'vscode';\n\ntype AutoDetect = 'on' | 'off';\n\nfunction exists(file: string): Promise<boolean> {\n\treturn new Promise<boolean>((resolve, _reject) => {\n\t\tfs.exists(file, (value) => {\n\t\t\tresolve(value);\n\t\t});\n\t});\n}\n\nfunction exec(command: string, options: cp.ExecOptions): Promise<{ stdout: string; stderr: string }> {\n\treturn new Promise<{ stdout: string; stderr: string }>((resolve, reject) => {\n\t\tcp.exec(command, options, (error, stdout, stderr) => {\n\t\t\tif (error) {\n\t\t\t\treject({ error, stdout, stderr });\n\t\t\t}\n\t\t\tresolve({ stdout, stderr });\n\t\t});\n\t});\n}\n\nconst buildNames: string[] = ['build', 'compile', 'watch'];\nfunction isBuildTask(name: string): boolean {\n\tfor (const buildName of buildNames) {\n\t\tif (name.indexOf(buildName) !== -1) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nconst testNames: string[] = ['test'];\nfunction isTestTask(name: string): boolean {\n\tfor (const testName of testNames) {\n\t\tif (name.indexOf(testName) !== -1) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nlet _channel: vscode.OutputChannel;\nfunction getOutputChannel(): vscode.OutputChannel {\n\tif (!_channel) {\n\t\t_channel = vscode.window.createOutputChannel('Grunt Auto Detection');\n\t}\n\treturn _channel;\n}\n\nfunction showError() {\n\tvscode.window.showWarningMessage(vscode.l10n.t(\"Problem finding grunt tasks. See the output for more information.\"),\n\t\tvscode.l10n.t(\"Go to output\")).then(() => {\n\t\t\tgetOutputChannel().show(true);\n\t\t});\n}\ninterface GruntTaskDefinition extends vscode.TaskDefinition {\n\ttask: string;\n\targs?: string[];\n\tfile?: string;\n}\n\nasync function findGruntCommand(rootPath: string): Promise<string> {\n\tlet command: string;\n\tconst platform = process.platform;\n\tif (platform === 'win32' && await exists(path.join(rootPath!, 'node_modules', '.bin', 'grunt.cmd'))) {\n\t\tcommand = path.join('.', 'node_modules', '.bin', 'grunt.cmd');\n\t} else if ((platform === 'linux' || platform === 'darwin') && await exists(path.join(rootPath!, 'node_modules', '.bin', 'grunt'))) {\n\t\tcommand = path.join('.', 'node_modules', '.bin', 'grunt');\n\t} else {\n\t\tcommand = 'grunt';\n\t}\n\treturn command;\n}\n\nclass FolderDetector {\n\n\tprivate fileWatcher: vscode.FileSystemWatcher | undefined;\n\tprivate promise: Thenable<vscode.Task[]> | undefined;\n\n\tconstructor(\n\t\tprivate _workspaceFolder: vscode.WorkspaceFolder,\n\t\tprivate _gruntCommand: Promise<string>) {\n\t}\n\n\tpublic get workspaceFolder(): vscode.WorkspaceFolder {\n\t\treturn this._workspaceFolder;\n\t}\n\n\tpublic isEnabled(): boolean {\n\t\treturn vscode.workspace.getConfiguration('grunt', this._workspaceFolder.uri).get<AutoDetect>('autoDetect') === 'on';\n\t}\n\n\tpublic start(): void {\n\t\tconst pattern = path.join(this._workspaceFolder.uri.fsPath, '{node_modules,[Gg]runtfile.js}');\n\t\tthis.fileWatcher = vscode.workspace.createFileSystemWatcher(pattern);\n\t\tthis.fileWatcher.onDidChange(() => this.promise = undefined);\n\t\tthis.fileWatcher.onDidCreate(() => this.promise = undefined);\n\t\tthis.fileWatcher.onDidDelete(() => this.promise = undefined);\n\t}\n\n\tpublic async getTasks(): Promise<vscode.Task[]> {\n\t\tif (this.isEnabled()) {\n\t\t\tif (!this.promise) {\n\t\t\t\tthis.promise = this.computeTasks();\n\t\t\t}\n\t\t\treturn this.promise;\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tpublic async getTask(_task: vscode.Task): Promise<vscode.Task | undefined> {\n\t\tconst taskDefinition = <any>_task.definition;\n\t\tconst gruntTask = taskDefinition.task;\n\t\tif (gruntTask) {\n\t\t\tconst options: vscode.ShellExecutionOptions = { cwd: this.workspaceFolder.uri.fsPath };\n\t\t\tconst source = 'grunt';\n\t\t\tconst task = gruntTask.indexOf(' ') === -1\n\t\t\t\t? new vscode.Task(taskDefinition, this.workspaceFolder, gruntTask, source, new vscode.ShellExecution(`${await this._gruntCommand}`, [gruntTask, ...taskDefinition.args], options))\n\t\t\t\t: new vscode.Task(taskDefinition, this.workspaceFolder, gruntTask, source, new vscode.ShellExecution(`${await this._gruntCommand}`, [`\"${gruntTask}\"`, ...taskDefinition.args], options));\n\t\t\treturn task;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async computeTasks(): Promise<vscode.Task[]> {\n\t\tconst rootPath = this._workspaceFolder.uri.scheme === 'file' ? this._workspaceFolder.uri.fsPath : undefined;\n\t\tconst emptyTasks: vscode.Task[] = [];\n\t\tif (!rootPath) {\n\t\t\treturn emptyTasks;\n\t\t}\n\t\tif (!await exists(path.join(rootPath, 'gruntfile.js')) && !await exists(path.join(rootPath, 'Gruntfile.js'))) {\n\t\t\treturn emptyTasks;\n\t\t}\n\n\t\tconst commandLine = `${await this._gruntCommand} --help --no-color`;\n\t\ttry {\n\t\t\tconst { stdout, stderr } = await exec(commandLine, { cwd: rootPath });\n\t\t\tif (stderr) {\n\t\t\t\tgetOutputChannel().appendLine(stderr);\n\t\t\t\tshowError();\n\t\t\t}\n\t\t\tconst result: vscode.Task[] = [];\n\t\t\tif (stdout) {\n\t\t\t\t// grunt lists tasks as follows (description is wrapped into a new line if too long):\n\t\t\t\t// ...\n\t\t\t\t// Available tasks\n\t\t\t\t//         uglify  Minify files with UglifyJS. *\n\t\t\t\t//         jshint  Validate files with JSHint. *\n\t\t\t\t//           test  Alias for \"jshint\", \"qunit\" tasks.\n\t\t\t\t//        default  Alias for \"jshint\", \"qunit\", \"concat\", \"uglify\" tasks.\n\t\t\t\t//           long  Alias for \"eslint\", \"qunit\", \"browserify\", \"sass\",\n\t\t\t\t//                 \"autoprefixer\", \"uglify\", tasks.\n\t\t\t\t//\n\t\t\t\t// Tasks run in the order specified\n\n\t\t\t\tconst lines = stdout.split(/\\r{0,1}\\n/);\n\t\t\t\tlet tasksStart = false;\n\t\t\t\tlet tasksEnd = false;\n\t\t\t\tfor (const line of lines) {\n\t\t\t\t\tif (line.length === 0) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (!tasksStart && !tasksEnd) {\n\t\t\t\t\t\tif (line.indexOf('Available tasks') === 0) {\n\t\t\t\t\t\t\ttasksStart = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (tasksStart && !tasksEnd) {\n\t\t\t\t\t\tif (line.indexOf('Tasks run in the order specified') === 0) {\n\t\t\t\t\t\t\ttasksEnd = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst regExp = /^\\s*(\\S.*\\S)  \\S/g;\n\t\t\t\t\t\t\tconst matches = regExp.exec(line);\n\t\t\t\t\t\t\tif (matches && matches.length === 2) {\n\t\t\t\t\t\t\t\tconst name = matches[1];\n\t\t\t\t\t\t\t\tconst kind: GruntTaskDefinition = {\n\t\t\t\t\t\t\t\t\ttype: 'grunt',\n\t\t\t\t\t\t\t\t\ttask: name\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tconst source = 'grunt';\n\t\t\t\t\t\t\t\tconst options: vscode.ShellExecutionOptions = { cwd: this.workspaceFolder.uri.fsPath };\n\t\t\t\t\t\t\t\tconst task = name.indexOf(' ') === -1\n\t\t\t\t\t\t\t\t\t? new vscode.Task(kind, this.workspaceFolder, name, source, new vscode.ShellExecution(`${await this._gruntCommand} ${name}`, options))\n\t\t\t\t\t\t\t\t\t: new vscode.Task(kind, this.workspaceFolder, name, source, new vscode.ShellExecution(`${await this._gruntCommand} \"${name}\"`, options));\n\t\t\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t\t\t\tconst lowerCaseTaskName = name.toLowerCase();\n\t\t\t\t\t\t\t\tif (isBuildTask(lowerCaseTaskName)) {\n\t\t\t\t\t\t\t\t\ttask.group = vscode.TaskGroup.Build;\n\t\t\t\t\t\t\t\t} else if (isTestTask(lowerCaseTaskName)) {\n\t\t\t\t\t\t\t\t\ttask.group = vscode.TaskGroup.Test;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tconst channel = getOutputChannel();\n\t\t\tif (err.stderr) {\n\t\t\t\tchannel.appendLine(err.stderr);\n\t\t\t}\n\t\t\tif (err.stdout) {\n\t\t\t\tchannel.appendLine(err.stdout);\n\t\t\t}\n\t\t\tchannel.appendLine(vscode.l10n.t(\"Auto detecting Grunt for folder {0} failed with error: {1}', this.workspaceFolder.name, err.error ? err.error.toString() : 'unknown\"));\n\t\t\tshowError();\n\t\t\treturn emptyTasks;\n\t\t}\n\t}\n\n\tpublic dispose() {\n\t\tthis.promise = undefined;\n\t\tif (this.fileWatcher) {\n\t\t\tthis.fileWatcher.dispose();\n\t\t}\n\t}\n}\n\nclass TaskDetector {\n\n\tprivate taskProvider: vscode.Disposable | undefined;\n\tprivate detectors: Map<string, FolderDetector> = new Map();\n\n\tconstructor() {\n\t}\n\n\tpublic start(): void {\n\t\tconst folders = vscode.workspace.workspaceFolders;\n\t\tif (folders) {\n\t\t\tthis.updateWorkspaceFolders(folders, []);\n\t\t}\n\t\tvscode.workspace.onDidChangeWorkspaceFolders((event) => this.updateWorkspaceFolders(event.added, event.removed));\n\t\tvscode.workspace.onDidChangeConfiguration(this.updateConfiguration, this);\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this.taskProvider) {\n\t\t\tthis.taskProvider.dispose();\n\t\t\tthis.taskProvider = undefined;\n\t\t}\n\t\tthis.detectors.clear();\n\t}\n\n\tprivate updateWorkspaceFolders(added: readonly vscode.WorkspaceFolder[], removed: readonly vscode.WorkspaceFolder[]): void {\n\t\tfor (const remove of removed) {\n\t\t\tconst detector = this.detectors.get(remove.uri.toString());\n\t\t\tif (detector) {\n\t\t\t\tdetector.dispose();\n\t\t\t\tthis.detectors.delete(remove.uri.toString());\n\t\t\t}\n\t\t}\n\t\tfor (const add of added) {\n\t\t\tconst detector = new FolderDetector(add, findGruntCommand(add.uri.fsPath));\n\t\t\tthis.detectors.set(add.uri.toString(), detector);\n\t\t\tif (detector.isEnabled()) {\n\t\t\t\tdetector.start();\n\t\t\t}\n\t\t}\n\t\tthis.updateProvider();\n\t}\n\n\tprivate updateConfiguration(): void {\n\t\tfor (const detector of this.detectors.values()) {\n\t\t\tdetector.dispose();\n\t\t\tthis.detectors.delete(detector.workspaceFolder.uri.toString());\n\t\t}\n\t\tconst folders = vscode.workspace.workspaceFolders;\n\t\tif (folders) {\n\t\t\tfor (const folder of folders) {\n\t\t\t\tif (!this.detectors.has(folder.uri.toString())) {\n\t\t\t\t\tconst detector = new FolderDetector(folder, findGruntCommand(folder.uri.fsPath));\n\t\t\t\t\tthis.detectors.set(folder.uri.toString(), detector);\n\t\t\t\t\tif (detector.isEnabled()) {\n\t\t\t\t\t\tdetector.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.updateProvider();\n\t}\n\n\tprivate updateProvider(): void {\n\t\tif (!this.taskProvider && this.detectors.size > 0) {\n\t\t\tconst thisCapture = this;\n\t\t\tthis.taskProvider = vscode.tasks.registerTaskProvider('grunt', {\n\t\t\t\tprovideTasks: (): Promise<vscode.Task[]> => {\n\t\t\t\t\treturn thisCapture.getTasks();\n\t\t\t\t},\n\t\t\t\tresolveTask(_task: vscode.Task): Promise<vscode.Task | undefined> {\n\t\t\t\t\treturn thisCapture.getTask(_task);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\telse if (this.taskProvider && this.detectors.size === 0) {\n\t\t\tthis.taskProvider.dispose();\n\t\t\tthis.taskProvider = undefined;\n\t\t}\n\t}\n\n\tpublic getTasks(): Promise<vscode.Task[]> {\n\t\treturn this.computeTasks();\n\t}\n\n\tprivate computeTasks(): Promise<vscode.Task[]> {\n\t\tif (this.detectors.size === 0) {\n\t\t\treturn Promise.resolve([]);\n\t\t} else if (this.detectors.size === 1) {\n\t\t\treturn this.detectors.values().next().value!.getTasks();\n\t\t} else {\n\t\t\tconst promises: Promise<vscode.Task[]>[] = [];\n\t\t\tfor (const detector of this.detectors.values()) {\n\t\t\t\tpromises.push(detector.getTasks().then((value) => value, () => []));\n\t\t\t}\n\t\t\treturn Promise.all(promises).then((values) => {\n\t\t\t\tconst result: vscode.Task[] = [];\n\t\t\t\tfor (const tasks of values) {\n\t\t\t\t\tif (tasks && tasks.length > 0) {\n\t\t\t\t\t\tresult.push(...tasks);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic async getTask(task: vscode.Task): Promise<vscode.Task | undefined> {\n\t\tif (this.detectors.size === 0) {\n\t\t\treturn undefined;\n\t\t} else if (this.detectors.size === 1) {\n\t\t\treturn this.detectors.values().next().value!.getTask(task);\n\t\t} else {\n\t\t\tif ((task.scope === vscode.TaskScope.Workspace) || (task.scope === vscode.TaskScope.Global)) {\n\t\t\t\treturn undefined;\n\t\t\t} else if (task.scope) {\n\t\t\t\tconst detector = this.detectors.get(task.scope.uri.toString());\n\t\t\t\tif (detector) {\n\t\t\t\t\treturn detector.getTask(task);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn undefined;\n\t\t}\n\t}\n}\n\nlet detector: TaskDetector;\nexport function activate(_context: vscode.ExtensionContext): void {\n\tdetector = new TaskDetector();\n\tdetector.start();\n}\n\nexport function deactivate(): void {\n\tdetector.dispose();\n}\n","module.exports = require(\"vscode\");","module.exports = require(\"child_process\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(184);\n"],"names":["_context","detector","TaskDetector","start","dispose","exists","file","Promise","resolve","_reject","fs","value","buildNames","isBuildTask","name","buildName","indexOf","testNames","isTestTask","testName","_channel","getOutputChannel","vscode","window","createOutputChannel","showError","showWarningMessage","l10n","t","then","show","async","findGruntCommand","rootPath","command","platform","process","path","join","FolderDetector","constructor","_workspaceFolder","_gruntCommand","workspaceFolder","this","isEnabled","workspace","getConfiguration","uri","get","pattern","fsPath","fileWatcher","createFileSystemWatcher","onDidChange","promise","undefined","onDidCreate","onDidDelete","getTasks","computeTasks","getTask","_task","taskDefinition","definition","gruntTask","task","options","cwd","source","Task","ShellExecution","args","scheme","emptyTasks","commandLine","stdout","stderr","reject","cp","exec","error","appendLine","result","lines","split","tasksStart","tasksEnd","line","length","matches","kind","type","push","lowerCaseTaskName","toLowerCase","group","TaskGroup","Build","Test","err","channel","detectors","Map","folders","workspaceFolders","updateWorkspaceFolders","onDidChangeWorkspaceFolders","event","added","removed","onDidChangeConfiguration","updateConfiguration","taskProvider","clear","remove","toString","delete","add","set","updateProvider","values","folder","has","size","thisCapture","tasks","registerTaskProvider","provideTasks","resolveTask","next","promises","all","scope","TaskScope","Workspace","Global","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}