{"version":3,"file":"askpass-main.js","mappings":"23BAKA,mBACA,UAEA,SAASA,EAAMC,GACdC,QAAQC,MAAM,mCACdD,QAAQC,MAAMF,GACdG,QAAQC,KAAK,EACd,EAEA,SAAcC,GACb,IAAKF,QAAQG,IAA6B,wBACzC,OAAOP,EAAM,gBAGd,IAAKI,QAAQG,IAA6B,wBACzC,OAAOP,EAAM,gBAGd,GAA+C,UAA3CI,QAAQG,IAA6B,yBAA4D,QAA3CH,QAAQG,IAA6B,wBAC9F,OAAOP,EAAM,iBAAiBI,QAAQG,IAA6B,2BAGpE,GAA0C,UAAtCH,QAAQG,IAAwB,oBAAmBH,QAAQG,IAA6B,wBAC3F,OAAOP,EAAM,8BAGd,MAAMQ,EAASJ,QAAQG,IAA6B,wBAC9CE,EAAcL,QAAQG,IAA6B,wBAGnDG,EAA0B,UAAhBD,EAA0BH,EAAK,GAAKA,EAAK,GAEzD,IAAIK,EACHC,EACAC,EAEmB,UAAhBJ,IACHE,EAAOL,EAAK,GAAGQ,QAAQ,kBAAmB,KAGvB,QAAhBL,IACC,cAAcM,KAAKL,GAItBE,EAAON,EAAK,IAAIQ,QAAQ,kBAAmB,KAG3CH,EAAOL,EAAK,GAAGQ,QAAQ,kBAAmB,IAC1CD,EAAcP,EAAK,MAIH,IAAI,EAAAU,UAAU,WACtBC,KAAK,CAAER,cAAaC,UAASC,OAAMC,OAAMC,gBAAeK,MAAKC,IACtEC,EAAGC,cAAcb,EAAQW,EAAM,MAC/BG,YAAW,IAAMlB,QAAQC,KAAK,IAAI,EAAE,IAClCkB,OAAMtB,GAAOD,EAAMC,IACvB,CAEAuB,CAAKpB,QAAQE,K,u3BC5Db,mBAEA,kBAIC,WAAAmB,CAAoBC,GAAA,KAAAA,YAAAA,EACnB,MAAMC,EAAgBvB,QAAQG,IAA2B,sBAEzD,IAAKoB,EACJ,MAAM,IAAIC,MAAM,iCAGjBC,KAAKF,cAAgBA,CACtB,CAEA,IAAAV,CAAKP,GACJ,MAAMoB,EAA4B,CACjCC,WAAYF,KAAKF,cACjBK,KAAM,IAAIH,KAAKH,cACfO,OAAQ,QAGT,OAAO,IAAIC,SAAQ,CAACC,EAAGC,KACtB,MAAMC,EAAMC,EAAK5B,QAAQoB,GAAMX,IAC9B,GAAuB,MAAnBA,EAAIoB,WACP,OAAOH,EAAE,IAAIR,MAAM,oBAAoBT,EAAIoB,eAG5C,MAAMC,EAAmB,GACzBrB,EAAIsB,GAAG,QAAQC,GAAKF,EAAOG,KAAKD,KAChCvB,EAAIsB,GAAG,OAAO,IAAMN,EAAES,KAAKC,MAAMC,OAAOC,OAAOP,GAAQQ,SAAS,WAAU,IAG3EX,EAAII,GAAG,SAASxC,GAAOmC,EAAEnC,KACzBoC,EAAIY,MAAML,KAAKM,UAAUxC,IACzB2B,EAAIc,KAAK,GAEX,E,WC3CDC,EAAOC,QAAUC,QAAQ,K,WCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUzC,KAAKmC,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://git/./src/askpass-main.ts","webpack://git/./src/ipc/ipcClient.ts","webpack://git/external node-commonjs \"fs\"","webpack://git/external node-commonjs \"http\"","webpack://git/webpack/bootstrap","webpack://git/webpack/startup"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport { IPCClient } from './ipc/ipcClient';\n\nfunction fatal(err: any): void {\n\tconsole.error('Missing or invalid credentials.');\n\tconsole.error(err);\n\tprocess.exit(1);\n}\n\nfunction main(argv: string[]): void {\n\tif (!process.env['VSCODE_GIT_ASKPASS_PIPE']) {\n\t\treturn fatal('Missing pipe');\n\t}\n\n\tif (!process.env['VSCODE_GIT_ASKPASS_TYPE']) {\n\t\treturn fatal('Missing type');\n\t}\n\n\tif (process.env['VSCODE_GIT_ASKPASS_TYPE'] !== 'https' && process.env['VSCODE_GIT_ASKPASS_TYPE'] !== 'ssh') {\n\t\treturn fatal(`Invalid type: ${process.env['VSCODE_GIT_ASKPASS_TYPE']}`);\n\t}\n\n\tif (process.env['VSCODE_GIT_COMMAND'] === 'fetch' && !!process.env['VSCODE_GIT_FETCH_SILENT']) {\n\t\treturn fatal('Skip silent fetch commands');\n\t}\n\n\tconst output = process.env['VSCODE_GIT_ASKPASS_PIPE'] as string;\n\tconst askpassType = process.env['VSCODE_GIT_ASKPASS_TYPE'] as 'https' | 'ssh';\n\n\t// HTTPS (username | password), SSH (passphrase | authenticity)\n\tconst request = askpassType === 'https' ? argv[2] : argv[3];\n\n\tlet host: string | undefined,\n\t\tfile: string | undefined,\n\t\tfingerprint: string | undefined;\n\n\tif (askpassType === 'https') {\n\t\thost = argv[4].replace(/^[\"']+|[\"':]+$/g, '');\n\t}\n\n\tif (askpassType === 'ssh') {\n\t\tif (/passphrase/i.test(request)) {\n\t\t\t// passphrase\n\t\t\t// Commit signing - Enter passphrase:\n\t\t\t// Git operation  - Enter passphrase for key '/c/Users/<username>/.ssh/id_ed25519':\n\t\t\tfile = argv[6]?.replace(/^[\"']+|[\"':]+$/g, '');\n\t\t} else {\n\t\t\t// authenticity\n\t\t\thost = argv[6].replace(/^[\"']+|[\"':]+$/g, '');\n\t\t\tfingerprint = argv[15];\n\t\t}\n\t}\n\n\tconst ipcClient = new IPCClient('askpass');\n\tipcClient.call({ askpassType, request, host, file, fingerprint }).then(res => {\n\t\tfs.writeFileSync(output, res + '\\n');\n\t\tsetTimeout(() => process.exit(0), 0);\n\t}).catch(err => fatal(err));\n}\n\nmain(process.argv);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as http from 'http';\n\nexport class IPCClient {\n\n\tprivate ipcHandlePath: string;\n\n\tconstructor(private handlerName: string) {\n\t\tconst ipcHandlePath = process.env['VSCODE_GIT_IPC_HANDLE'];\n\n\t\tif (!ipcHandlePath) {\n\t\t\tthrow new Error('Missing VSCODE_GIT_IPC_HANDLE');\n\t\t}\n\n\t\tthis.ipcHandlePath = ipcHandlePath;\n\t}\n\n\tcall(request: any): Promise<any> {\n\t\tconst opts: http.RequestOptions = {\n\t\t\tsocketPath: this.ipcHandlePath,\n\t\t\tpath: `/${this.handlerName}`,\n\t\t\tmethod: 'POST'\n\t\t};\n\n\t\treturn new Promise((c, e) => {\n\t\t\tconst req = http.request(opts, res => {\n\t\t\t\tif (res.statusCode !== 200) {\n\t\t\t\t\treturn e(new Error(`Bad status code: ${res.statusCode}`));\n\t\t\t\t}\n\n\t\t\t\tconst chunks: Buffer[] = [];\n\t\t\t\tres.on('data', d => chunks.push(d));\n\t\t\t\tres.on('end', () => c(JSON.parse(Buffer.concat(chunks).toString('utf8'))));\n\t\t\t});\n\n\t\t\treq.on('error', err => e(err));\n\t\t\treq.write(JSON.stringify(request));\n\t\t\treq.end();\n\t\t});\n\t}\n}\n","module.exports = require(\"fs\");","module.exports = require(\"http\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(231);\n"],"names":["fatal","err","console","error","process","exit","argv","env","output","askpassType","request","host","file","fingerprint","replace","test","IPCClient","call","then","res","fs","writeFileSync","setTimeout","catch","main","constructor","handlerName","ipcHandlePath","Error","this","opts","socketPath","path","method","Promise","c","e","req","http","statusCode","chunks","on","d","push","JSON","parse","Buffer","concat","toString","write","stringify","end","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}